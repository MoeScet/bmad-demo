name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'shared/python/**'
      - '.github/workflows/ci-backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/**'
      - 'shared/python/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']
        service:
          - teams-bot
          - query-orchestration
          - fast-qa
          - semantic-search
          - safety-classification
          - user-context
          - manual-processing
          - management-api

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: bmad_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.service }}-${{ hashFiles('services/${{ matrix.service }}/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.service }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd services/${{ matrix.service }}
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run linting with ruff
      run: |
        cd services/${{ matrix.service }}
        ruff check src/ --format=github

    - name: Run type checking
      run: |
        cd services/${{ matrix.service }}
        if [ -f "src" ]; then
          python -m mypy src/ --ignore-missing-imports
        fi

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/bmad_test
        ENVIRONMENT: test
      run: |
        cd services/${{ matrix.service }}
        if [ -d "tests" ]; then
          pytest tests/ -v --cov=src --cov-report=xml
        fi

    - name: Upload coverage
      if: matrix.service == 'teams-bot'
      uses: codecov/codecov-action@v3
      with:
        file: ./services/${{ matrix.service }}/coverage.xml
        flags: ${{ matrix.service }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run safety check
      run: |
        python -m pip install safety
        find services -name requirements.txt -exec safety check -r {} \;

    - name: Run bandit security scan
      run: |
        python -m pip install bandit
        find services -name "*.py" -path "*/src/*" | xargs bandit -r -f json -o bandit-report.json || true

  build-check:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Test Docker builds
      run: |
        for service in services/*/; do
          if [ -f "$service/Dockerfile" ]; then
            service_name=$(basename "$service")
            echo "Testing build for $service_name"
            docker build -t "bmad-$service_name:test" "$service"
          fi
        done