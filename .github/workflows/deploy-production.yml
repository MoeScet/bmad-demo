name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.deploy }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run pre-deployment checks
      id: check
      run: |
        # Check if this is a hotfix or regular deployment
        if [[ "${{ github.event.head_commit.message }}" == *"[HOTFIX]"* ]]; then
          echo "deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "deploy=true" >> $GITHUB_OUTPUT  
        else
          echo "deploy=false" >> $GITHUB_OUTPUT
        fi

  deploy-backend:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    environment: production
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup Railway CLI
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        echo "$HOME/.railway/bin" >> $GITHUB_PATH

    - name: Run production tests
      env:
        DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
      run: |
        python -m pip install pytest
        # Run critical path tests only
        pytest tests/integration/critical/ -v

    - name: Deploy services to Railway production
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}
      run: |
        # Deploy each service to production environment
        for service in services/*/; do
          if [ -f "$service/Dockerfile" ]; then
            service_name=$(basename "$service")
            echo "Deploying $service_name to production..."
            
            cd "$service"
            railway login --token $RAILWAY_TOKEN
            railway deploy --service "bmad-$service_name-prod"
            cd ..
          fi
        done

    - name: Wait for deployment and health check
      env:
        PROD_API_URL: ${{ secrets.PROD_API_URL }}
      run: |
        echo "Waiting for services to be ready..."
        sleep 60
        
        # Run comprehensive health checks
        python scripts/health-check.py --env production --timeout 300

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-backend]
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'web/package-lock.json'
    
    - name: Install and build
      env:
        VITE_API_URL: ${{ secrets.PROD_API_URL }}
        VITE_ENVIRONMENT: production
      run: |
        cd web
        npm ci
        npm run build
        
        # Run build verification
        npm run test:build
    
    - name: Deploy to production
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}
      run: |
        cd web
        railway login --token $RAILWAY_TOKEN
        railway deploy --service bmad-web-prod

  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    
    steps:
    - name: Run post-deployment verification
      if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success'
      env:
        PROD_API_URL: ${{ secrets.PROD_API_URL }}
      run: |
        # Run end-to-end smoke tests
        python scripts/e2e-smoke-test.py --env production

    - name: Create rollback plan
      if: failure()
      run: |
        echo "Creating rollback plan for SHA: ${{ github.sha }}"
        # Store current deployment state for potential rollback
        
    - name: Notify team
      if: always()
      env:
        TEAMS_WEBHOOK: ${{ secrets.TEAMS_WEBHOOK_URL }}
        DEPLOY_STATUS: ${{ needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success' && 'SUCCESS' || 'FAILED' }}
      run: |
        curl -H "Content-Type: application/json" -d '{
          "text": "ðŸš€ Production Deployment ${{ env.DEPLOY_STATUS }}: ${{ github.sha }}"
        }' $TEAMS_WEBHOOK